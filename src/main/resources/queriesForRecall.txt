_ -->import java.util.Optional; import java.util.Set; import java.util.concurrent.Executors;
t = PrimitiveType.I32; --> ty = PrimitiveType.I32;
println(e) --> e
long lookupMethodInPool(long metaspaceConstantPool, int cpi, byte opcode, long[] unresolvedInfo); --> long lookupKlassInPool(long metaspaceConstantPool, int cpi);
_ -->import com.oracle.jvmci.asm.sparc.*;
public void generate(NodeLIRBuilderTool gen, LIRGenerationResult res) { --> public void generate(NodeLIRBuilderTool gen) {
searchHit.getSource().clear(); searchHit.getSource().putAll(results); --> searchHit.getSourceAsMap().clear(); searchHit.getSourceAsMap().putAll(results);
return sub(left, toComparableValue.execute(right)); --> return sub(left, toComparableValue.executeWithTarget(right));
_ -->import static org.graalvm.compiler.hotspot.HotSpotForeignCallLinkage.RegisterEffect.DESTROYS_REGISTERS;
Arrays.sort(files); --> Arrays.sort(files, naturalComparator);
return isHostConfiguration() ? (label + " (host)") : label.toString(); --> return label.toString();
import android.support.design.widget.FloatingActionButton; -->_
return types; --> return foundTypes;
throw JVMCIError.shouldNotReachHere(); --> throw GraalError.shouldNotReachHere();
this.id = result.getRuntime().getBitcodeID(); -->_
try (ToLibGraalScope<TruffleToLibGraal.Id> s = new ToLibGraalScope<>(InitializeRuntime, env)) { --> try (JNILibGraalScope<TruffleToLibGraal.Id> s = new JNILibGraalScope<>(InitializeRuntime, env)) {
byte[] memo = hasChildren ? null : LEAF_MEMO; --> byte[] memo = hasChildren ? null : NO_MEMO;
@JsonProperty -->_
StructuredGraph graph = parseEager(method, AllowAssumptions.YES, options); --> StructuredGraph graph = parseEager(method, AllowAssumptions.YES, goptions);
public int read(char cbuf[], int off, int len) throws IOException { --> public int read(char[] cbuf, int off, int len) throws IOException {
import com.oracle.ID.ID.ID.*; -->_
ID<0>(ID<1>, args, context); --> ID<0>(ID<1>, args, intrinsic);
annotationWriter.write(appendable, context).append(LT); --> annotationWriter.write(appendable, context).append(ID);
int remainBytes = EXPR<0> = EXPR --> int remainBytes = EXPR<0> = EXPR
_ --> return ID.getValue(<...>);
codeCache.ID(method, compResult); --> <...>
if (ID<0> == null) return; --> if (ID<0> == null) { return; }
_ --> if (EXPR binOP EXPR) { return; }
log.debug(LT, ID); --> LOG.debug(LT, ID);
if (type instanceof IntegerType) { return ID.ID(EXPR, EXPR); --><...>
ID slotSize = WordFactory.unsigned(EXPR); -->_
public static double[][] ID(float[] ID<0>) { return EXPR; --> static double[][] ID(float[] ID<0>) { return EXPR;
return EXPR; --> return useLibraryConstant(EXPR);
import static ID.ID.ID.ID.ID; -->_
if (EXPR<0>) ID = QueryParamEntity.empty(); --> if (EXPR<0>) { ID = QueryParamEntity.empty(); }
public void ID() { --> public void profileInlinedCall() { <...>
_ --> res = res binOP LT + (vararg ? LT : LT);
_ -->import io.ID.ID.ID.ID;
package com.oracle.max.graal.ID.ID; -->package com.oracle.graal.ID.ID;
Assert.assertEquals(1, test(<...>)); --> runTest("test", <...>);
import org.ID.ID.ID.ID; -->import org.ID.ID.ID.ID; <...>
<...> --> return Optional.of(EXPR);
package <...>; -->package ID.ID.ID.ID;
ID = LT; --> ID = LT; ID = LT;
ID<0>(LT, ID); --> ID<0>(false);
for (AudioTrack audioTrack : ID.ID) { <...> --> <...>
GalleryComment comment = ID[EXPR]; --> GalleryComment comment = ID.ID[EXPR];
_ -->import ID.ID.ID; import ID.ID.ID; import ID.ID.ID;
Collection<ID> ID(<...>) { --> Collection<ID> generateSyntheticBean(<...>) {
@Before public void ID() throws ID { --> @BeforeClass public static void ID() throws ID {
ID<0> = this; --> ID<0> = this.ID();
ID<0>.incrementHost(EXPR); --> ID<0>.incrementSource(EXPR);
return ID; --> return EXPR binOP EXPR;
_ -->import com.oracle.ID.ID.ID.ID;
_ -->public boolean ID<0>() { return ID.ID<0>(); }
ID.ID(EXPR, EXPR); --> ID();
return null; --> throw EXPR;
throw EXPR; --> throw new GraalError(EXPR);
@SuppressWarnings(<...>) -->_
<...> --> merge.setNext(EXPR);
ID(); ID(); --> ID(); ID();
final ID<0> ID<1> = EXPR; --> final ID<0> ID<1> = EXPR;
_ -->import static ID.ID.ID.ID;
ID ID = ID.ID(); -->_
return ID; --> return EXPR;
this.ID = EXPR; -->_
ID(EXPR); ID(EXPR); --> ID(EXPR); ID(EXPR);
<...> --> return ID.ID(EXPR, EXPR);
ID ID = EXPR; --> final ID ID = EXPR;
ID ID = ID.ID(EXPR, EXPR); --> ID ID = ID.ID(EXPR, EXPR);
this.ID<0> = ID.ID(ID<0>); --> this.ID<0> = ID<0>;
ID(ID, ID); -->_
_ --> for (ID ID<0> = EXPR; ID<0> binOP EXPR; ID<0> unOP) { <...>
ID<0>(LT); --> ID<0>(LT);
_ --> EXPR.ID(EXPR, LT);
ID<0>.ID<1>(LT, ID) --> ID<0>.ID<1>(LT, EXPR)
<...> --> new ID[]{}
(ID binOP LT) binOP (ID binOP LT) --> <...>
ID unOP; --> ID unOP;
ID OP ID; --> ID OP EXPR;
