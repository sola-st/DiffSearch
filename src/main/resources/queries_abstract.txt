ID(); ID(); --> ID(); ID();
final ID<0> ID<1> = EXPR --> final ID<0> ID<1> = EXPR;
_ -->import static ID.ID.ID.ID;
ID ID = ID.ID(); -->_
return ID; --> return EXPR;
this.ID = EXPR; -->_
ID(EXPR); ID(EXPR); --> ID(EXPR); ID(EXPR);
<...> --> return ID.ID(EXPR, EXPR);
ID ID = EXPR; --> final ID ID = EXPR;
ID ID = ID.ID(EXPR, EXPR); --> ID ID = ID.ID(EXPR, EXPR);
this.ID<0> = ID.ID(ID<0>); --> this.ID<0> = ID<0>;
ID(ID, ID); -->_
_ --> for (ID ID<0> = EXPR; ID<0> binOP EXPR; ID<0> unOP) { <...>
ID<0>(LT); --> ID<0>(LT);
_ --> EXPR.ID(EXPR, LT);
ID<0>.ID<1>(LT, ID) --> ID<0>.ID<1>(LT, EXPR)
<...> --> new ID[]{}
(ID binOP LT) binOP (ID binOP LT) --> <...>
ID unOP; --> ID unOP;
ID OP ID; --> ID OP EXPR;