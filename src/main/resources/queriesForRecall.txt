ID<1>(ID<2>, LT<3>);-->ID<1>(LT<3>, ID<2>);
EXPR = ID<1>(<...>);-->EXPR = ID<1>(<...>);
EXPR = ID<1>(<...>)-->EXPR = ID<1>(<...>)
ID<1>(ID<2>, ID<3>);-->ID<1>(ID<3>, ID<2>);
ID<0>.ID<1>(ID, LT)-->ID<0>.ID<1>(ID, LT)
LT-->LT binOP LT
LT-->LT
return;-->return ID;
return ID;-->return ID;
return;-->return EXPR;
return EXPR;-->return EXPR;
return null;-->return EXPR;
_-->return;
<...>;-->_
_--><...>
System.out.println(EXPR);-->_
System.out.print(EXPR);-->_
System.out.print(EXPR);-->System.out.print(EXPR);
_-->System.out.println(<...>);
_-->System.out.println(<...>)
EXPR = ID(ID);-->EXPR = ID(ID);
EXPR = ID();-->EXPR = ID(ID);
EXPR = ID()-->EXPR = ID(ID)
EXPR = LT;-->EXPR = ID;
EXPR = LT-->EXPR = ID
continue;-->_;
break;-->_;
break;-->return EXPR;
_-->continue;
if (EXPR) {-->EXPR;
if (LT) {-->if (ID) {
if (ID) {-->if (EXPR) {
if (ID) {-->if (ID()) {
if (ID<0>) {-->if (ID<1>()) {
<...>-->} else {
_-->import java.io.ID;
_-->import java.ID.ID;
_-->import org.ID.ID.ID;
_-->import org.ID.ID.ID.ID;
import ID.ID.ID.ID;-->import org.ID.ID.ID;
import java.util.ID;-->_
if (EXPR != null) {-->if (EXPR == null) {
if (EXPR == null) {-->if (EXPR != null) {
<...> ID(<...>) throws ID { --> <...> ID(<...>) {
<...> ID() { --> <...> ID() {
public static void ID() { -->public static void ID() {
public static void ID(<...>) { -->public static void ID(<...>) {
public void ID(<...>) { -->public static void ID(<...>) {
package ID;-->package ID;
EXPR-->try {EXPR;} catch (ID ID) {<...>}
EXPR;-->try {EXPR;} catch (ID ID) {<...>}
EXPR;-->try {EXPR;} finally {<...>}
int ID;-->int ID = LT;
double ID;-->double ID = EXPR;
boolean ID = EXPR;-->boolean ID = EXPR;
while (EXPR) {-->while (EXPR) {
while (LT) {-->while (EXPR) {
for (<...>) {-->for (<...>) {
_-->for (ID ID: ID) {
ID<2>.add(ID<0>);-->ID<2>.addAll(ID<1>);
ID.toString()-->ID.toString()
ID.hashCode()-->ID.hashCode()
list.add(ID);--><...>
ID binOP ID-->ID binOP ID
ID unOP;-->ID unOP;
_-->ID unOP
ID<0>() --> ID<0>(EXPR)
EXPR.ID<0>(EXPR<0>, EXPR<1>, EXPR<2>, EXPR<3>); --> EXPR.ID<0>(EXPR<0>, EXPR<1>, EXPR<2>, EXPR<2>);
EXPR.ID<0>(EXPR<0>, EXPR<1>); --> EXPR.ID<0>(EXPR<0>, EXPR<1>);
EXPR.ID<0>(EXPR<0>); --> EXPR.ID<0>(EXPR<0>);